@page "/payments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Payment For Itenary</h3>
<br />

<a href="/payments/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Payment
</a>
<br />
<br />

@if (Payments == null)
{

    <div class="alert alert-info">Loading Payments...</div>

}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Payment Id</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payment in Payments)
            {
                <tr>
                    <td>@payment.Id</td>
                    <td>@payment.Amount</td>
                    <td>@payment.Type</td>
                    <td>
                        <a href="/attractions/view/@payment.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/attractions/edit/@payment.Id" class="btn btn-primary">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete (payment.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }


        </tbody>
    </table>
}


@code {

    private List<Payment> Payments;

    protected async override Task OnInitializedAsync()
    {
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoint.PaymentEndpoint}");
    }

    async Task Delete(int paymentId)
    {
        var payment = Payments.First(q => q.Id == paymentId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoint.PaymentEndpoint}/{paymentId}");
            await OnInitializedAsync();

        }

    }

}
