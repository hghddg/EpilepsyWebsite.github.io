@page "/bookings/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Booking For Itenary</h3>
<br />

<a href="/bookings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Booking
</a>
<br />
<br />


@if (Bookings == null)
{

    <div class="alert alert-info">Loading Bookings...</div>

}


else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Booking Id</th>
                <th>Name</th>
                <th>Payment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in Bookings)
            {
                <tr>
                    <td>@booking.Id</td>
                    <td>@booking.Name</td>
                    <td>@booking.Payment</td>
                    <td>
                        <a href="/attractions/view/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/attractions/edit/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete (booking.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }


        </tbody>
    </table>
}


@code {

    private List<Booking> Bookings;

    protected async override Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoint.BookingsEndpoint}");
    }

    async Task Delete(int bookingId)
    {
        var booking = Bookings.First(q => q.Id == bookingId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {booking.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoint.BookingsEndpoint}/{bookingId}");
            await OnInitializedAsync();

        }

    }

}
