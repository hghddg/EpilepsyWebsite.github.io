@page "/itenaryitems/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3 class="card-title">Itenary List</h3>
<br />

<a href="/itenaryitems/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Itenary
</a>
<br />
<br />

@if (ItenaryItems == null)
{

<div class="alert alert-info">Loading Itenary Items...</div>

}

else
{
<table class="table table-responsive" id="itenaryitemsTable">
    <thead>
        <tr>
            <th>ItenaryItem Id</th>
            <th>Country</th>
            <th>Place</th>
            <th>Attraction</th>
            <th>Hotel</th>
            <th>Payment</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var itenaryitem in ItenaryItems)
    {
        if(@itenaryitem.CreatedBy == _currentUserName) { 
        <tr>
            <td>@itenaryitem.Id</td>
            <td>@itenaryitem.Country.Name</td>
            <td>@itenaryitem.Location.Name</td>
            <td>@itenaryitem.Attraction.Name</td>
            <td>@itenaryitem.Hotel.Name</td>
            <td>@itenaryitem.Payment.Plan</td>
            <td>
                <a href="/itenaryitems/view/@itenaryitem.Id" class="btn btn-primary">
                    <span class="oi oi-book"></span>
                </a>
                <a href="/itenaryitems/edit/@itenaryitem.Id" class="btn btn-primary">
                    <span class="oi oi-pencil"></span>
                </a>
                <button class="btn btn-danger" @onclick="@(()=>Delete (itenaryitem.Id))">
                    <span class="oi oi-delete"></span>
                </button>
            </td>
        </tr>
        }
    }
    </tbody>
</table>
}


@code {

  private List<ItenaryItem> ItenaryItems;
  private List<AppUser> AppUsers;
  private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
  private string _currentUserId;
  private string _currentUserName;
  private string _currentUserRole;
  protected async override Task OnInitializedAsync()
  {
    ItenaryItems = await _client.GetFromJsonAsync<List<ItenaryItem>>($"{Endpoint.ItenaryItemsEndpoint}");
    AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoint.AccountsEndpoint}");
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity.IsAuthenticated)
    {
      _claims = user.Claims;
      //_currentUserName = user.Identity.Name;
      if (_claims.Count() > 0)
      {
        foreach (var claim in _claims)
        {
          if (claim.Type == "sub")
          {
            _currentUserId = claim.Value;
            continue;

          }
          if (claim.Type == "name")
          {
            _currentUserName = claim.Value;
            continue;
          }
        }
      }
    }

    if (_currentUserId != String.Empty)
    {
      _currentUserRole = await _client.GetStringAsync($"{Endpoint.AccountsEndpoint}/{_currentUserId}");
    }
  }

  async Task Delete(int itenaryitemId)
  {
    var itenaryitem = ItenaryItems.First(q => q.Id == itenaryitemId);
    var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {itenaryitem.Country}?");
    if (confirm)
    {
      await _client.DeleteAsync($"{Endpoint.ItenaryItemsEndpoint}/{itenaryitemId}");
      await OnInitializedAsync();

    }

  }

  protected async override Task OnAfterRenderAsync(bool firstRender)
  {
    await js.InvokeVoidAsync("AddDataTable", "#itenaryitemsTable");
  }

  public void Dispose()
  {
    js.InvokeVoidAsync("DataTablesDispose", "#itenaryitemsTable");
  }

}
