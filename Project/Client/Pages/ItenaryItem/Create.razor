@page "/itenaryitems/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3 class="card-title">Create New ItenaryItems</h3>
<hr />
<br />

<FormComponent ButtonText="Create Itenary Item" itenaryitem="itenaryitem" OnValidSubmit="@CreateItenaryItem" />



@code {

  ItenaryItem itenaryitem = new ItenaryItem();

  private IList<Country> Countries;
  private IList<Location> Locations;
  private IList<Attraction> Attractions;
  private IList<Hotel> Hotels;

  private List<AppUser> AppUsers;
  private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
  private string _currentUserId;
  private string _currentUserName;
  private string _currentUserRole;


  protected async override Task OnInitializedAsync()
  {
    Countries = await _client.GetFromJsonAsync<List<Country>>($"{Endpoint.CountryEndpoint}");
    Locations = await _client.GetFromJsonAsync<List<Location>>($"{Endpoint.LocationEndpoint}");
    Attractions = await _client.GetFromJsonAsync<List<Attraction>>($"{Endpoint.AttractionsEndpoint}");
    Hotels = await _client.GetFromJsonAsync<List<Hotel>>($"{Endpoint.HotelEndpoint}");
    AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoint.AccountsEndpoint}");
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity.IsAuthenticated)
    {
      _claims = user.Claims;
      //_currentUserName = user.Identity.Name;
      if (_claims.Count() > 0)
      {
        foreach (var claim in _claims)
        {
          if (claim.Type == "sub")
          {
            _currentUserId = claim.Value;
            continue;

          }
          if (claim.Type == "name")
          {
            _currentUserName = claim.Value;
            continue;
          }
        }
      }
    }

    if (_currentUserId != String.Empty)
    {
      _currentUserRole = await _client.GetStringAsync($"{Endpoint.AccountsEndpoint}/{_currentUserId}");
    }
  }


  private async Task CreateItenaryItem()
  {
    await _client.PostAsJsonAsync(Endpoint.ItenaryItemsEndpoint, itenaryitem);
    _navManager.NavigateTo("/itenaryitems/");
  }

}
