@page "/hotels/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3 class="card-title">Hotel For Itenary</h3>
<br />

<a href="/hotels/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    @admin
</a>
<br />
<br />

@if (Hotels == null)
{

    <div class="alert alert-info">Loading Hotels...</div>

}


else
{
    <table class="table table-responsive" id="hotelsTable">
        <thead>
            <tr>
                <th>Hotel Id</th>
                <th>Name</th>
                <th>Rating</th>
                <th>Contact</th>
                <th>Location</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hotel in Hotels)
            {
            <tr>
                <td>@hotel.Id</td>
                <td>@hotel.Name</td>
                <td>@hotel.Rating</td>
                <td>@hotel.Contact</td>
                <td>@hotel.HLocation</td>
                <td>@hotel.Price</td>
                <td>
                    <a href="/hotels/view/@hotel.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/hotels/edit/@hotel.Id" class="btn btn-primary" hidden =hide>
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete (hotel.Id))" hidden =hide>
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }


        </tbody>
    </table>
}


@code {

  private List<Hotel> Hotels;
  private List<AppUser> AppUsers;
  private string _currentUserId;
  private string _currentUserName;
  private string _currentUserRole;
  private string hide;
  private string admin = "Create New Hotel";
  protected async override Task OnInitializedAsync()
  {
    Hotels = await _client.GetFromJsonAsync<List<Hotel>>($"{Endpoint.HotelEndpoint}");
    AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoint.AccountsEndpoint}");
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (_currentUserRole != "Administrator")
    {
      hide = "hidden";
      admin = "Admin Only";

    }
  }

  async Task Delete(int hotelId)
  {
    if (_currentUserRole != "Administrator")
    {
      var hotel = Hotels.First(q => q.Id == hotelId);
      var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {hotel.Id}?");
      if (confirm)
      {
        await _client.DeleteAsync($"{Endpoint.HotelEndpoint}/{hotelId}");
        await OnInitializedAsync();

      }
    }
  }


  protected async override Task OnAfterRenderAsync(bool firstRender)
  {
    await js.InvokeVoidAsync("AddDataTable", "#hotelsTable");
  }

  public void Dispose()
  {
    js.InvokeVoidAsync("DataTablesDispose", "#hotelsTable");
  }

}
